require('app.life')

describe("Life", function()
    describe("Generation of new cells", function()
        map = {}
        map[0] = {}
        it("One cell on a 1x1 map", function()
            map[0][0] = Cell.new(0, 0, true)
            local mapNextGen = calculateNewGeneration(map)
            assert.truthy(mapNextGen[0][0].isAlive == false)
        end)
        it("Three horizontal cells on a small 3x3 map", function()
            map[0][0] = Cell.new(0, 0, false)
            map[0][1] = Cell.new(0, 1, true)
            map[0][2] = Cell.new(0, 2, false)
            map[1] = {}
            map[1][0] = Cell.new(1, 0, false)
            map[1][1] = Cell.new(1, 1, true)
            map[1][2] = Cell.new(1, 2, false)
            map[2] = {}
            map[2][0] = Cell.new(2, 0, false)
            map[2][1] = Cell.new(2, 1, true)
            map[2][2] = Cell.new(2, 2, false)
            print(" --- before ---")
            printMap(map)
            local mapNextGen = calculateNewGeneration(map)
            print(" --- after ---")
            printMap(mapNextGen)
            -- Two columns have no cells
            assert.truthy(mapNextGen[0][0].isAlive == false)
            assert.truthy(mapNextGen[0][1].isAlive == false)
            assert.truthy(mapNextGen[0][2].isAlive == false)
            assert.truthy(mapNextGen[2][0].isAlive == false)
            assert.truthy(mapNextGen[2][1].isAlive == false)
            assert.truthy(mapNextGen[2][2].isAlive == false)
            -- Middle colum has alive cells
            assert.truthy(mapNextGen[1][0].isAlive == true)
            assert.truthy(mapNextGen[1][1].isAlive == true)
            assert.truthy(mapNextGen[1][2].isAlive == true)
        end)
        it("Generating random 5x5 map", function()
            local map = generateInitialCells(map, 5, 5)
            printMap(map)
        end)
    end)
end)
